<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on CookieHookey</title><link>https://cookiehookey.v6.rocks/tags/security/</link><description>Recent content in Security on CookieHookey</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Sun, 12 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://cookiehookey.v6.rocks/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>パスワード管理術</title><link>https://cookiehookey.v6.rocks/the-art-of-password-management/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><guid>https://cookiehookey.v6.rocks/the-art-of-password-management/</guid><description>テクノロジーがインフラ化した現代では､行政とのやりとりでも必然的にパスワードを設定する場面に出くわす｡ それ以外でも､大抵は､既に数多くのアカウントを持っていることだろう｡ つまり､ユーザーネームやパスワードといった認証情報を管理することは必須と言える｡ しかし､その肝心の管理方法は十分に広まっていない｡ ここでは､管理方法について考察してみる｡
TLDR パスワード(PW)は､パスワードマネージャー(PWM)で管理する PWMは専用のNativeアプリであり､オフライン前提で､オープンソースであること 認証情報を強化する(PWMのPWはパスフレーズで管理する) PWは､PWMで管理する PWMを用いる理由は､PWM以外の管理方法では､毎回の入力が面倒と感じ､大抵は簡単なPWにしたくなるからだ｡ PWMであれば､自動入力であったり､コピペが可能なので､どんなPWでも作業は変わらない｡
PWMは､専用のNativeアプリ､オフライン前提､オープンソースであること 専用のNativeアプリを選択する ブラウザなどのおまけのPWMを利用しない理由は､ブラウザをdependencyとしている以上､セキュリティが第一で開発されていないからだ｡ そのため､ブラウザ側のセキュリティ第一ではない意思決定の影響を受け得る｡
オフライン前提 Webアプリ(クラウド型)を利用しない理由は､大切だと言っている情報をわざわざwebにアップロードする意味がないからだ｡ 暗号化されていようが､攻撃の対象になりうることは変わらない｡
デバイス間で共有したいならば､ローカル環境で､syncthingやnextcloudなどのファイルを共有する専用のソフトを使えば良い｡ セキュリティを考えた時に､公開サーバーや､自分が管理していないストレージにわざわざデータを保存する必要はない｡
オープンソースであること 中身がわからないものをパッケージの文言だけで判断できるだろうか｡ 安全と書いてあれば､安全なのか｡ 中身を見て判断するできるべきだ｡ オフライン前提というところにも関わるが､いつのまにかネットと通信しているアプリは結構多い｡ 中身を担保するためには､オープンソースしかないだろう｡
認証情報を強化する PWMに登録する認証情報を強化する PW PWMで､記号や､大文字･小文字､数字を含めたできるだけ桁数･文字数の多いPWを自動でランダムで作成する｡ 詳細は､この後出てくる&amp;quot;屈強なPWとは&amp;quot;を参照｡
解読にかかるコストは､password entropyと言われ､bitという単位で表される｡ 48bitsより､70bitsの方が解読にかかるコストは高くなる｡ 例えば､Password-Entropy-Calculatorで計算できるが､実際に使うPWは入力しないでおこう｡
メールアドレス 認証情報には､PW以外にも､メールアドレスが使われることが多い｡ その場合､aliasを用いてアカウントごとに違うメールアドレスを設定する｡
PWM用のPWを強化する 屈強なPWとは PWM自体のPWは別途管理する必要がある｡ 端的に言えば､PWM用のPWを設定して､覚え､バックアップ用に紙に書いて保管する｡
まず､屈強なPWとは何か｡ 単純化すれば､桁数(文字数)である｡ なるほど記号や大文字･小文字､数字を含めれば解読されにくくなるが､桁数を増やした方がより簡単に計算量を増やすことができる｡ パスワード長と解読時間の関係を見ると､記号を増やすより数桁でも増やしたほうが解読に時間がかかることがわかるだろう｡
一方で､長いPWほど覚えにくくなるわけだが､PWではなくパスフレーズを用いれば対応できる｡ trimmer.proactive.tummy.tacky.tweet.crushingといったような単語の羅列がパスフレーズである｡ 単語のリストを用いて､ランダムに作成することが望ましい｡
PWM用のパスフレーズの決め方 パスフレーズを､オンラインで自動で決めてくれるサービスもある(ppgen.cgi)｡ ただ､コンピューター上で行うものは､すべて計算可能な変数であるため､ランダムとは言い難い｡ 本当にランダムという意味では､コンピューター上で扱えない変数をプロセスに組み込むべきである｡
手順
サイコロを5個振り､5桁の番号を定める｡ 単語リストからその5桁の番号に対応する単語をピックアップする｡ 例えば､サイコロの目が､ 16363 ならば､単語は enka(演歌) となる｡ 1と2をを繰り返し単語を繋げる｡ 区切り文字として､&amp;quot;-&amp;ldquo;や&amp;rdquo;.&amp;ldquo;を用いてもいいし､そのまま繋げても良い｡ 文字数が多い方が解読はしにくくなるため､6~8単語くらいは繋げた方がいい｡ 生成されたPWを紙にメモする｡覚えた後は､黒ヤギさんに頼んで､金庫に入れて保管してもらう｡ ランダムにするために､手順1､もしくは2をコンピューター以外で行う｡つまり､
実際にサイコロを振って数字を算出する｡ 手持ちの国語辞典､英語辞典などから単語を抽出する｡ より強化する パスフレーズを変換する 先程､PWM用のPW例として出したパスフレーズtrimmer.</description></item><item><title>SMS認証はやめてくれい</title><link>https://cookiehookey.v6.rocks/why-not-stop-using-sms-as-2fa/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><guid>https://cookiehookey.v6.rocks/why-not-stop-using-sms-as-2fa/</guid><description>電話回線を使う習慣がないため､いちいちSMSを受信するのが面倒くさい｡それは仕方ないとしよう｡たが､手間の割にSMSは堅牢な仕組みでもない｡YubiKeyやTOTPであれば､通信環境さえ必要ないのだけれど､なぜわざわざ脆弱性が問題視されているSMSを使うのだろうか｡
脆弱性の悪用･利用 携帯の通信には､回線交換方式とパケット交換方式があるが､脆弱性が問題視されているのは､回線交換方式である｡そのため信号線も音声回線(つまり､電話もSMS)も同じく脆弱性にさらされている｡
脆弱性が悪用･利用されているという話は､ときどき話題にはなっている｡
例えば､
中国がカリブ海諸国のネットワークを悪用して､アメリカ人の監視をしている サウジアラビアがアメリカ在住のサウジアラビア人の位置情報を取得している SS7の脆弱性が利用され､ドイツの銀行からお金が引き出された といったような話がたまにニュースになる｡
脆弱性の箇所 脆弱性があるのはSS7であるが､SS7とは､回線交換網(PSTNとか3G･LTE)で利用されている1970年代に登場したプロトコルで､電話やSMSを利用する際に用いられる｡もともとは､事業者間の閉じたネットワークを想定して利用されてきたプロトコルであるため､2000年にIPネットワークで利用できるようになってからは認証や暗号化等のセキュリティ上の問題が浮上した｡
通信事業者の登録や規制に厳しくない国で､SS7ハブを用意できれば､世界を対象にその脆弱性を利用できる｡自分で用意できなくても､闇市場ではその仕組みを利用できる権利みたいなものを取引している｡
とはいっても外国からの通信をブロックすればいいじゃないという発想もありそうだが､正規の利用方法としてのローミングも同時にできなくなる｡なら不正に利用されたものだけブロックすればいいじゃないとなるが､不正かどうかを判別する仕組みがSS7にはない｡かくして､すべてのコマンドが処理されるようになっている｡
脆弱性の利用例 プロトコル自体の脆弱性のため､攻撃のベクターは複数あるだろうが､一例を挙げてみる｡
特定の電話番号あてにSMSを送りたいですよというリクエストを発行すると､HLR(Home Location Register:携帯の加入者情報を管理するデータベース)から､以下の情報が返って来る｡
IMSI(International Mobile Subscriber Identity:加入者の識別番号で､携帯内かSIMカードに格納されている) MSC(Mobile Switching Center:現在の移動通信交換局) VLR(Visitor Location Register:加入者の位置情報の一時的データベース) このリクエストをすることで､HLRのアドレスとIMSIがわかるので､より細かいコマンドを実行できるようだ｡ 例えば､細かい位置情報を割り出すことができたり､通話の傍受､SMSを乗っ取ることもできる｡
SMSが認証に利用されてる理由 こうした脆弱性があるのに､SMSを認証として利用しているのは､なぜか｡
登録数制限(1人1個とか) 身分証明書の代わり(日本の場合､基本的に身分証明しないと携帯電話番号は使えない) 簡易的に2段階認証を実装できる(というセキュリティーシアター) アプリをインストールする必要がない､別途トークン端末を用意する必要がない 見通し 通信事業者 4G､5Gと世代を経るに連れ､より安全なプロトコルになるにしても､下位互換のために実際の解決まではまだ時間がかかるのだろう｡例えば､VoLTEの場合､電話に関してはパケット交換方式を用いるようなので､SS7の影響はなさそうだが､通話する双方がVoLTEじゃないと影響は残る｡
サービス提供者 SMS認証を廃止するつもりは当座ないだろう｡2008年より､SS7の脆弱性が指摘されてはいるものの､多くのサービスでSMSを認証方式として採用している現状は､2段階認証を否定的に受け入れているからだろう｡セキュリティを主眼においたらこの判断にはならない気がする｡通信規格がアップデートされるのを待つ方が早いかも知れない｡
2段階認証は､本来セキュリティ上の理由で採用するのだろうが､SMSだとその点が効果的ではない｡SS7の脆弱性がマイナス要素にはならなかったとしても､2段階認証だから安心だと考えるユーザーがいるならば､パスワードの強化･管理に対する意識を軽んじた結果､セキュリティ上反対の効果を生むことになる｡
まとめ 緊急時､災害時であったり､通信手段の1つとしてSMSを利用すること自体はいいのだが､それを認証に利用することは望ましくない｡根本的な解決策は､通信事業者側が対応するか､サービス提供側がSMS認証やめるか･選択肢をもたせるかしかない｡
ユーザーが対応できることは限られている｡仮にSMSを暗号化できるSilenceというアプリを用意してもC2Cのサービスだから､SMS認証ではどうしようもない｡
できることは､
SMS認証を使用するサービス自体を避けるか､他の認証方法を選ぶこと 緩和策として､ 認証のときだけ使用する番号を用意する(まだましくらい) SMS認証は当てにはせず､パスワード強化･管理､アクセスログの確認等を重視する その他､不必要にSMSへのアクセス権限を求めるアプリは使用しない 以上､SMSを2段階認証に使わないでくれいという話であった｡</description></item></channel></rss>